• Wählen	Sie	eines	der	zuvor	aufgelisteten	Design	Pattern.	
• Erklären	Sie	(in	nicht	mehr	als	2	A4-Seiten	oder	als	Präsentation)
• die	grundsätzliche	Idee	des	von	Ihnen	ausgewählten	Pattern,
• wie	es	sich	gegen	andere	Pattern	abgrenzt,
• welche	praktische	Relevanz	/	Einsatzgebiete	das	Pattern	hat,
• wie	es	sich	als	UML-Klassendiagramm	beschreiben	lässt.	
• Implementieren	Sie	das	von	Ihnen	ausgewählte	Pattern	in	einem	Beispiel.
• Formulieren	Sie	dazu	eine	entsprechende	Aufgabe,	die	Studentinnen	in	ca.	1,5h	
lösen	können.
• Präsentieren	Sie	eine	gut	dokumentierte	Lösung	der	Beispielimplementierung.
• Sie	präsentieren	Ihre	Dokumentation	und	die	Beispielimplementierung	in	einem	
persönlichen	Gespräch	von	ca.	20	min.	Termin	6.	und	13.Juli	à bitte	eintragen.


Proxy

Ein Proxy ist ein Strukturmuster Patter und gilt als Stellvertreter etwar einer Schnittstelle. 
Das Strukturmuster Proxy bietet einen kontrollierten Zugriff auf Funktionalitäten, 
er repräsentiert und beinhaltet Funktionalitäten einer anderen Klasse. Durch die Proxy Klassen können diese 
Funktionalitäten erweitert werden, (sensible) geschützt werden oder (in einen entfernten System )repräsentiert 
werden bis das echte Objekt eintrifft. Das ist voll allem empfehlenswert, 
wenn anderen Nutzergruppen ins spiel kommen. Es gibt verschiedene Formen des Design Patterns hier ein paar Beispiele:

- Remote Proxy
  Ein Remote Proxy liefert ein lokales Objekt, dass auf ein Subjekt Objekt in einem entfernten System referenziert.
  Generell über eine Netzwerkverbindung. (Bsp. Remote  Procedure Call)


- Smart Proxy
  Smart Proxies fügen extra Funktionalitäten zum echten Objekt hinzu. Die Funktionalität ist meistens unsichtbar für den
  Client. Ein smart Proxy kann zu Beispiel dafür verwendet werden, die Aufrufe auf das unter liegende originale Objekt mitzulogen.
  
  
- Protection Proxy
  Ein Protection Proxy schafft eine Schützschild vor dem echten Objekt. Also würde beispielsweise das echte 
  Objekt einen Zugriff auf eine Datenbank haben und somit sensible Daten verwalten, könnte das Protection Proxy
  Methoden zur Verfügung stellen, die den Zugriff auf die daten etwas einschränken könnten, etwa mit einer notwedigen Authentisierung. 


Der Unterschied zwischen einem Adapter ist, dass das Ziel eines Adapters ist zwei von einander unabhängige Systeme mit einander zu verbinden 
und ein Proxy eine Art Stellvertreter für ein System meistens an der Schnittstelle zum Nutzer ist. Jedoch lassen sich die beiden Patterns doch mit einander 
Verbinden. Der Adapter besteht in grundegenommen auch aus zwei Proxies. Er stellt auf der einen Seite einen passenden Schnittstelle zur Verfügung und 
repräsentiert damit das andere System und auf der anderen  Seite genauso. Nur mit dem Entscheidenen unterschied, dass die Systeme ohne die jeweilige implementation 
des Adapters dazwischden nicht mit einer kompatibel wären.

Oder unter verschiedenster Umstände auch ein Platzhalter.
